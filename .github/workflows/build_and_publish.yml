name: Publish Python üêç distributions üì¶

on:
  push:
    branches: [ 'main' ]
    tags:
      - 'v*'

jobs:
  build-and-push-image:
    name: Build and push
    runs-on: [self-hosted, Linux]
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=raw,value=test,enable=true

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            APP_VERSION=${{ github.ref_name }}

  migrate:
    name: Pull new version and make migration
    runs-on: [self-hosted, Linux]
    environment:
      name: Pre-release
    steps:
      - name: Log in to the Container registry
        uses: docker/login-action@2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull new version
        run: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test

      - name: Run new version
        id: run_test
        run: |
          docker stop ${{ env.CONTAINER_NAME }} || true && docker rm ${{ env.CONTAINER_NAME }} || true
          docker run \
            --detach \
            --restart on-failure:3 \
            --network=web -p 8080:8080 \
            --env AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=${{ secrets.SQL_ALCHEMY_CONN }} \
            --name ${{ env.CONTAINER_NAME }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test \

  build-and-publish:
    name: Build and publish Python üêç distributions üì¶ to PyPI and TestPyPI
    needs: migrate
    runs-on: [self-hosted, Linux]
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: Release
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m ensurepip 
          pip install build --user 
          python -m build --wheel --sdist --outdir dist/
      - name: Publish a Python distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
